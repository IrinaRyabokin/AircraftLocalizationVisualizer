# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AircraftLocalizationVis
                                 A QGIS plugin
 Visualize Sensor network and data from aircrafts
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-20
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Iryna Ryabokin
        email                : riabokin.iryna1122@vu.cdu.edu.ua
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QVariant
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QDockWidget, QLabel, QHBoxLayout, QSlider, QWidget
from qgis.core import QgsProject, QgsVectorLayer, QgsFeature, QgsField, QgsGeometry, QgsPointXY, QgsLineString, QgsSimpleMarkerSymbolLayerBase
from qgis.gui import QgsMapTool, QgsMapToolEmitPoint
from PyQt5.QtCore import pyqtSignal
from qgis.gui import QgsMapToolIdentifyFeature
from qgis.PyQt.QtCore import QTime
import qgis.core


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .aircraft_localization_vis_dialog import AircraftLocalizationVisDialog
import os.path
import math
import json
import bisect

AIRCRAFT_ID = 'aircraft'
LAT = 'latitude'
LONG = 'longitude'
MEASUREMENTS = 'measurements'
TIME_AT_SERVER = 'timeAtServer'

SENSOR_SERIAL = 'serial'


class AircraftLocalizationVis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AircraftLocalizationVis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Aircraft Localization Visualizer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AircraftLocalizationVis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/aircraft_localization_vis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Aircraft Localization Visualizer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Aircraft Localization Visualizer'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = AircraftLocalizationVisDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.loadAicraftData()
#            self.initClickHandler()

    def loadAicraftData(self):
        self.aircraftLayer = None
        self.trackLayer = None
        self.measurementsLayer = None
        self.trackAircraftId = -1

        sensorsFilename = self.dlg.lineEditSensorsFilename.text()
        print('sensors filename:', sensorsFilename)

        csvpath = 'file:///' + sensorsFilename
        uri = '{}?type=csv&xField={}&yField={}&crs={}'.format(
          csvpath, 'longitude', 'latitude', 'EPSG:4326')

        SENSORS_LAYER_NAME = 'Sensors'

        self.sensorsLayer = QgsVectorLayer(uri, SENSORS_LAYER_NAME, "delimitedtext")
        QgsProject.instance().addMapLayer(self.sensorsLayer)

        self.sensorCoords = dict()
        for feature in self.sensorsLayer.getFeatures():
            attr = feature.attributeMap()
            sensor_id = attr[SENSOR_SERIAL]
            sensor_lat = attr[LAT]
            sensor_long = attr[LONG]
            self.sensorCoords[sensor_id] = (sensor_lat, sensor_long)

        sensorLayer = QgsProject.instance().mapLayersByName(SENSORS_LAYER_NAME)[0]
        QgsProject.instance().layerTreeRoot().findLayer(sensorLayer.id()).setItemVisibilityChecked(True)

        self.iface.setActiveLayer(sensorLayer)
        self.iface.zoomToActiveLayer()

        layer = self.iface.activeLayer()
        single_symbol_renderer = layer.renderer()
        symbol = single_symbol_renderer.symbol()
        #Set fill colour
        symbol.setColor(QColor.fromRgb(255,0,0))

        #Refresh
        layer.triggerRepaint()
        self.iface.layerTreeView().refreshLayerSymbology(layer.id())

        aircraftsFilename = self.dlg.lineEditPackagesFilename.text()
        csvpath = 'file:///' + aircraftsFilename
        uri = '{}?type=csv&xField={}&yField={}&crs={}'.format(
          csvpath, 'longitude', 'latitude', 'EPSG:4326')

        self.packagesLayer = QgsVectorLayer(uri, "data_packages", "delimitedtext")
        field_names = self.packagesLayer.fields().names()
        print('field names:', field_names)

        idx_timeAtServer = self.packagesLayer.fields().indexFromName(TIME_AT_SERVER)
        idx_lat = self.packagesLayer.fields().indexFromName(LAT)
        idx_long = self.packagesLayer.fields().indexFromName(LONG)
        idx_measurements = self.packagesLayer.fields().indexFromName(MEASUREMENTS)
        idx_aircraftid = self.packagesLayer.fields().indexFromName(AIRCRAFT_ID)


        minTime = 1000000
        maxTime = 0

        self.aircraftPackages = dict()

        features = self.packagesLayer.getFeatures()
        for feature in features:
            attr = feature.attributes()
            timeAtServer = attr[idx_timeAtServer]
            pos_lat = attr[idx_lat]
            pos_long = attr[idx_long]
            aircraft_id = attr[idx_aircraftid]
            measurements = attr[idx_measurements]
            m = json.loads(measurements)
            meas_sensor_ids = [x[0] for x in m]

            minTime = min(minTime, timeAtServer)
            maxTime = max(maxTime, timeAtServer)

            if isinstance(pos_lat, float) and isinstance(pos_long, float):
                if aircraft_id not in self.aircraftPackages:
                    self.aircraftPackages[aircraft_id] = []

                pkg = {
                    TIME_AT_SERVER: timeAtServer,
                    LAT: pos_lat,
                    LONG: pos_long,
                    MEASUREMENTS: meas_sensor_ids
                    }

                self.aircraftPackages[aircraft_id].append(pkg)

        print('num aircrafts:', len(self.aircraftPackages))

        self.initDockSlider(int(minTime), int(maxTime) )

    def initDockSlider(self, minValue:int, maxValue:int):
        print('initDockWidget', minValue, maxValue)
        self.dockSliderWidget = QDockWidget("Час спостереження", self.iface.mainWindow())
#        label = QLabel()
#        label.setText('Час спостереження:')

        slider = QSlider(Qt.Horizontal)
        slider.setMinimum(minValue)
        slider.setMaximum(maxValue)
        slider.setValue(minValue)
        slider.setTickInterval(300)
        slider.setTickPosition(QSlider.TicksBelow)

        self.labelTime = QLabel()

        layout = QHBoxLayout()
#        layout.addWidget(label)
        layout.addWidget(slider)
        layout.addWidget(self.labelTime)

        dockWidget = QWidget()
        dockWidget.setLayout(layout)
        self.dockSliderWidget.setWidget(dockWidget)

        self.iface.addDockWidget(Qt.TopDockWidgetArea, self.dockSliderWidget)
        self.dockSliderWidget.show()
        slider.valueChanged.connect(self.slotTimeSliderValueChanged)
        self.slotTimeSliderValueChanged(minValue)

    def slotTimeSliderValueChanged(self, newTime: int):
        print(f'{newTime= }')

        self.labelTime.setText(QTime.fromMSecsSinceStartOfDay(newTime * 1000).toString("hh:mm:ss"))

        aircrafts = self.filterAircraftsByTime(newTime)
        self.currAircraftsDict = {x[AIRCRAFT_ID]: x for x in aircrafts}
        print('filtered aicrafts:', len(aircrafts))

        addToMap = self.aircraftLayer is None
        print(f'{addToMap= }')
        if addToMap:
            self.aircraftLayer = QgsVectorLayer('Point?crs=EPSG:4326', 'Aircrafts', 'memory')

        provider = self.aircraftLayer.dataProvider()
        if addToMap:
            provider.addAttributes([QgsField('aircraft_id', QVariant.String)])
            self.aircraftLayer.updateFields()
        else:
            features = self.aircraftLayer.getFeatures()
            remove_ids = [f.id() for f in features]
            provider.deleteFeatures(remove_ids)

        for aircraft in aircrafts:
            f = QgsFeature()
            f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(aircraft[LONG], aircraft[LAT])))
            f.setAttributes([aircraft[AIRCRAFT_ID]])
            provider.addFeature(f)

        self.aircraftLayer.updateExtents()
        self.aircraftLayer.triggerRepaint()

        if addToMap:
            QgsProject.instance().addMapLayer(self.aircraftLayer)
            aircraftLayerTree = QgsProject.instance().mapLayersByName('Aircrafts')[0]
            print('aircraftLayerTree.id()', aircraftLayerTree.id())
            QgsProject.instance().layerTreeRoot().findLayer(aircraftLayerTree.id()).setItemVisibilityChecked(True)

            layer = self.iface.activeLayer()
            single_symbol_renderer = layer.renderer()
            print(single_symbol_renderer)
            symbol = single_symbol_renderer.symbol()
            print(symbol)
            print(symbol.symbolLayer(0))
            #Set fill colour
            symbol.setColor(QColor.fromRgb(0,255,0))
            symbol.setSize(3)
#            symbol.symbolLayer(0).setShape(QgsSimpleMarkerSymbolLayerBase.Star)

            #Refresh
            layer.triggerRepaint()
            self.iface.layerTreeView().refreshLayerSymbology(layer.id())

            self.initClickHandler()

        if self.trackAircraftId != -1:
            self.showAircraftTrack(self.trackAircraftId)

    def filterAircraftsByTime(self, tm: int):
        aircrafts = []

        for aicraft_id, packages in self.aircraftPackages.items():
            pos = bisect.bisect_left(packages, tm, key=lambda x: x[TIME_AT_SERVER])
            if pos>=len(packages):
                continue

            pkg = packages[pos]
            if abs(pkg[TIME_AT_SERVER] - tm)>30:
                continue
            pkg[AIRCRAFT_ID] = aicraft_id
            aircrafts.append(pkg)

        return aircrafts

    def initClickHandler(self):
        print('initClickHandler')

#        layer = self.iface.activeLayer()
        layer = self.aircraftLayer
        mc=self.iface.mapCanvas()
        self.identifyFeature = QgsMapToolIdentifyFeature(mc)
        self.identifyFeature.setLayer(layer)

        self.mapTool = PointTool(self.iface.mapCanvas(), self.identifyFeature, self.aircraftLayer)
        self.iface.mapCanvas().setMapTool(self.mapTool)
        self.mapTool.aircraftIdentified.connect(self.showAircraftTrack)


#        mc=self.iface.mapCanvas()
#        mapTool = QgsMapToolIdentifyFeature(mc)
#        mapTool.setLayer(self.aircraftLayer)
#        mc.setMapTool(mapTool)
#        mapTool.featureIdentified.connect(self.onFeatureIdentified)

#    def onFeatureIdentified(self, feature):
#        print("feature selected : ", feature.id() )




    def display_point(self, point):
        coords = "Map Coordinates: {:.4f}, {:.4f}".format(point.x(), point.y())
        print(coords)

    def showAircraftTrack(self, aircraft_id: int):
        if aircraft_id not in self.aircraftPackages:
            return

        self.trackAircraftId = aircraft_id

        print(f'{aircraft_id= }')

        addToMap = self.trackLayer is None
        if addToMap:
            self.trackLayer = QgsVectorLayer('Linestring?crs=EPSG:4326', 'Track', 'memory')

        provider = self.trackLayer.dataProvider()

        if not addToMap:
            features = self.trackLayer.getFeatures()
            remove_ids = [f.id() for f in features]
            provider.deleteFeatures(remove_ids)

        aircraft_data = self.aircraftPackages[aircraft_id]

        f = QgsFeature()
        f.setGeometry(QgsLineString([QgsPointXY(x[LONG], x[LAT]) for x in aircraft_data]) )
        provider.addFeature(f)

        self.trackLayer.updateExtents()
        self.trackLayer.triggerRepaint()

        if addToMap:
            QgsProject.instance().addMapLayer(self.trackLayer)
            trackLayerTree = QgsProject.instance().mapLayersByName('Track')[0]
            QgsProject.instance().layerTreeRoot().findLayer(trackLayerTree.id()).setItemVisibilityChecked(True)

            layer = self.iface.activeLayer()
            single_symbol_renderer = layer.renderer()
            symbol = single_symbol_renderer.symbol()
            #Set fill colour
            symbol.setColor(QColor.fromRgb(255,0,0))

            layer.renderer().symbol().setWidth(0.5)

            #Refresh
            layer.triggerRepaint()
            self.iface.layerTreeView().refreshLayerSymbology(layer.id())

        self.showAircraftMeasurements(aircraft_id)

    def showAircraftMeasurements(self, aircraft_id: int):
        print('showAircraftMeasurements', aircraft_id)

        addToMap = self.measurementsLayer is None
        if addToMap:
            self.measurementsLayer = QgsVectorLayer('Linestring?crs=EPSG:4326', 'Measurements', 'memory')

        provider = self.measurementsLayer.dataProvider()
        if not addToMap:
            features = self.measurementsLayer.getFeatures()
            remove_ids = [f.id() for f in features]
            provider.deleteFeatures(remove_ids)

        if aircraft_id in self.currAircraftsDict:
            print('in')
            meas = self.currAircraftsDict[aircraft_id][MEASUREMENTS]
            print('meas len;', len(meas))
            for sensor_id in meas:
                f = QgsFeature()
                aircraft_point = QgsPointXY(self.currAircraftsDict[aircraft_id][LONG], self.currAircraftsDict[aircraft_id][LAT])
                sensor_point = QgsPointXY(self.sensorCoords[sensor_id][1], self.sensorCoords[sensor_id][0])

                f.setGeometry(QgsLineString([aircraft_point, sensor_point]) )
                provider.addFeature(f)

        self.measurementsLayer.updateExtents()
        self.measurementsLayer.triggerRepaint()

        if addToMap:
            QgsProject.instance().addMapLayer(self.measurementsLayer)
            measurementsLayerTree = QgsProject.instance().mapLayersByName('Measurements')[0]
            QgsProject.instance().layerTreeRoot().findLayer(measurementsLayerTree.id()).setItemVisibilityChecked(True)

            layer = self.iface.activeLayer()
            single_symbol_renderer = layer.renderer()
            symbol = single_symbol_renderer.symbol()
            #Set fill colour
            symbol.setColor(QColor.fromRgb(0,255, 0))

            layer.renderer().symbol().setWidth(0.25)

            #Refresh
            layer.triggerRepaint()
            self.iface.layerTreeView().refreshLayerSymbology(layer.id())


class PointTool(QgsMapToolEmitPoint):
    aircraftIdentified = pyqtSignal([int])

    def __init__(self, canvas, identifyTool, layer):
        super(QgsMapTool, self).__init__(canvas)
        self.identifyTool = identifyTool
        self.aircraftLayer = layer


    def canvasReleaseEvent(self, event):
        print(event)
        point= event.pos()

        res = self.identifyTool.identify(point.x(), point.y(), layerList=[self.aircraftLayer])
        ids = [x.mFeature.attributeMap()['aircraft_id'] for x in res]
        print('identify:', ids)
        if len(ids)>0:
            self.aircraftIdentified.emit(int(ids[0]))

